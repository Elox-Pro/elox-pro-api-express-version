generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// This model store the information about the company and their relations with users and loan settings
model Company {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  name         String         @unique()
  imageUrl     String?        @map("image_url")
  users        User[]
  loanSettings LoanSettings[]

  @@map("companies")
}

// This model defines the core user information for the system
model User {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // User roles
  // Values: SYSTEM_ADMIN, COMPANY_OWNER, COMPANY_ADMIN, COMPANY_CUSTOMER
  role String

  // The user credentials to log in to the system
  credential UserCredential?

  // Additonal user information
  profile UserProfile?

  // Information related with the customer ranks
  customerRank UserRank?

  // Information related to Know Your Customer (KYC) checks for users
  KYC KYC?

  //  User address information
  addresses Address[]

  // Information related to the user documents and documents uploads
  documents UserDocument[]

  // Information related to the user contacts (e.g., personal references) 
  contacts UserContact[]

  // Information related to the user bank accounts
  bankAccounts UserBankAccount[]

  // Customer loans
  loans Loan[]

  // Loans as guarantor
  guarantorLoans Loan[] @relation(name: "loans_as_guarantor")

  // User activities and system events
  auditTrails AuditTrail[]

  // Relationships

  // The relationship between the user and the company
  // the SYSTEM_ADMIN role does not have any relationship with any company
  companyId Int?     @map("company_id")
  company   Company? @relation(fields: [companyId], references: [id])

  @@map("users")
}

// This model stores information related to the user credentials and their authentication
model UserCredential {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  username String  @unique
  email    String  @unique
  password String
  phone    String? @unique

  // Flat indication email verification status
  emailVerified Boolean @default(false) @map("email_verified")

  // Flag indicating phone verification status
  phoneVerified Boolean @default(false) @map("phone_verified")

  // Authentication method (e.g., email, phone number)
  authMethod String? @map("auth_method")

  // Last login timestamp
  lastLoginAt DateTime? @map("last_login_at")

  // Relationships

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("user_credentials")
}

// This model stores additional profile information for users
model UserProfile {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  firstName String
  lastName  String

  // Gender (e.g., Male, Female)
  gender String?

  avatarUrl String? @map("avatar_url")

  // Relationships

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

// This model stores document information about the user, itâ€™s useful to store kyc information.
model UserDocument {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Document type (e.g., passport, Id card, Address, Selfie)
  type String

  // Document value (e.g.,document number, address data)
  value String?

  description String? @db.Text

  // URL of document front image
  documentFrontUrl String? @map("document_front_url")

  // URL of document back image
  documentBackUrl String? @map("document_back_url")

  // Relationships

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("users_documents")
}

// This model stores user address information
model Address {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  streetAddress    String  @map("street_address")
  apartamentNumber String? @map("apartament_number")
  city             String
  state            String

  // Postal code
  zipCode String @map("zip_code")

  // Type of address (e.g., home, work, billing)
  type String

  // Flag indicating default address for user
  isDefault Boolean @default(false) @map("is_default")

  // Relationships

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  countryId Int     @map("country_id")
  country   Country @relation(fields: [countryId], references: [id])

  @@map("addresses")
}

// This model stores information about different countries in the world.
model Country {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Country name
  name String

  // ISO2 Country code
  iso2 String

  // Internationally-recognized standard phone number format
  e164 Int

  // Country main currency
  ccy String?

  // Country main language
  lang String?

  // List of addresses linked to this country
  addresses Address[]

  @@map("countries")
}

// This model stores user account information  for financial transactions
model UserBankAccount {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  bankName String @map("bank_name")

  // Unique account number
  accountNumber String @unique @map("account_number")

  // Type of account (e.g., savings, checking, loan)
  accountType String @map("account_type")

  //  Flag indicating active account status
  isActive Boolean @default(true) @map("is_active")

  // Flag indicating the main account
  isPrimary Boolean @default(false) @map("is_primary")

  // International Bank Account Number
  iban String? @unique

  // Bank Identifier Code
  bic String? @unique

  // Relationships

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("user_bank_accounts")
}

// This model stores  information related to Know Your Customer (KYC) checks for users
model KYC {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Flag indicating successful KYC verification
  verified Boolean @default(false)

  // Flag indicating rejected KYC verification
  rejected Boolean @default(false)

  // Reason for KYC rejection
  rejectionReason String? @map("rejection_reason")

  // Date of KYC verification
  verificationDate DateTime? @map("verification_date")

  // Relationships

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("KYCs")
}

// This model stores  information related to the users contacts
model UserContact {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Type of contact (e.g., personal or familiar reference, sponsor)
  type String

  // The relationship with the contact (e.g., mother, daughter, friends, coworkers)
  relationship String?

  // Relationships

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("user_contacts")
}

// This model defines the different user ranks within the system, potentially associated with specific privileges and benefits.
model Rank {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Unique name of the rank (e.g., bronze, silver, gold)
  name String @unique

  // Minimum number of rank points required to achieve this rank
  minimumPoints Int @map("minimum_points")

  // Description of the rank and associated benefits
  description String? @db.Text

  imageUrl  String?    @map("image_url")
  userRanks UserRank[]

  @@map("ranks")
}

// This model defines the relationship with users and ranks.
model UserRank {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // The current user points
  points Int

  // List of the user rank transactions
  rankTransactions RankTransaction[]

  // Relationships

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  // The current user rank
  rankId Int  @map("rank_id")
  rank   Rank @relation(fields: [rankId], references: [id])

  @@map("user_ranks")
}

// This model stores information about transactions that contribute to or influence user ranks.
model RankTransaction {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Type of transaction affecting the user's rank (e.g., loan application, repayment, referral bonus)
  type String

  // Number of rank points gained or lost from the transaction
  pointsEarned Int @map("points_earned")

  // Optional description
  description String? @db.Text

  // Optional JSON object containing additional details about the transaction (e.g., loan amount, referral code)
  details Json?

  // Relationships

  userRankId Int      @map("user_rank_id")
  userRank   UserRank @relation(fields: [userRankId], references: [id])

  @@map("rank_transactions")
}

// This model stores information about individual loan applications and their lifecycle.
model Loan {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Date loan application was submitted
  applicationDate DateTime @map("application_date")

  // Date loan application was approved 
  approvedDate DateTime? @map("approved_date")

  // Approved loan amount
  amount Decimal @db.Decimal(10, 2)

  // Loan interest rate (APR)
  interestRate Decimal @map("interest_rate") @db.Decimal(5, 2)

  // Loan interest rate by month
  monthlyInterestRate Decimal @map("monthly_interest_rate") @db.Decimal(5, 2)

  // Loan term based on repayments frequency
  term Int

  // Repayment frequency to use with terms
  // Values: DAILY, WEEKLY, BI-WEEKLY, MONTHLY
  repaymentFrequency String @map("repayment_frequency")

  // Current status of the loan.
  // Values: PENDING, APPROVED, REJECTED, CLOSED, PAST_DUE
  status String

  // Flag indicating if applies late fee to loan. 
  enabledlateFee Boolean @default(false) @map("enabled_late_fee")

  // Date the loan was fully repaid and closed
  closedDate DateTime? @map("closed_date")

  // Representing the stage of delinquency
  // Values: EARLY, LATE, SEVERE
  pastDueStage String? @map("past_due_stage")

  // Status of collection efforts (e.g., initiated, ongoing, settled).
  // Values: INITIATED, ONGOING, SETTLED
  collectionStatus String? @map("collection_status")

  // Date the loan was declared in default (if applicable)
  defaultDate DateTime? @map("default_date")

  // Optional loan notes
  notes String? @map("notes") @db.Text

  // Information about individual loan repayments made by the customer
  repayments LoanRepayment[]

  // Details schedule of individual payments for each loan
  schedules LoanSchedule[]

  // Information about collateral assets pledged by users 
  collaterals LoanCollateral[]

  // Information and links to various documents related to individual loans and collaterals
  documents LoanDocument[]

  // Relationships

  customerId Int   @map("customer_id")
  customer   User? @relation(fields: [customerId], references: [id])

  settingsId Int           @map("settings_id")
  settings   LoanSettings? @relation(fields: [settingsId], references: [id])

  guarantorId Int   @map("guarantor_id")
  guarantor   User? @relation(name: "loans_as_guarantor", fields: [guarantorId], references: [id])

  @@map("loans")
}

// This model stores configuration settings for various  aspects of loans, including late fees.
model LoanSettings {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Name of the loan settings
  name String

  // Description of the loan settings
  description String? @db.Text

  // Loan type name (e.g, personal loan, auto loan, mortgage)
  loanType String @map("loan_type")

  // Percentage of outstanding balance charged as late fee
  lateFeePercentage Decimal @map("late_fee_percentage") @db.Decimal(5, 2)

  // Number of days after due date before late fee applies
  gracePeriodDays Int @map("grace_period_days")

  // Number of days after which a loan is considered in default
  defaultDatePeriod Int @map("default_date_period")

  loan Loan[]

  // Relationship

  // Each compnay has their own loan settings
  companyId Int     @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  @@map("loan_settings")
}

//  This model stores information about individual loan repayments made by users.
model LoanRepayment {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Date the repayment was made
  paymentDate DateTime @map("payment_date")

  // Amount paid in the repayment
  amount Decimal @db.Decimal(10, 2)

  // Amount applied towards principal balance
  principalAmount Decimal @map("principal_amount") @db.Decimal(10, 2)

  // Amount applied towards interest
  interestAmount Decimal @map("interest_amount") @db.Decimal(10, 2)

  // Amount applied towards late fee
  lateFeeAmount Decimal @map("late_fee_amount") @db.Decimal(10, 2)

  // Method used for payment (e.g., bank transfer, credit card, cash)
  paymentMethod String @map("payment_method")

  // Unique reference number for the transaction
  transactionReference String @map("transaction_reference")

  // Transaction URL of Image or document 
  transactionUrl String? @map("transaction_url")

  // Notes of the repayment
  notes String? @db.Text

  // Relationships

  loanId Int   @map("loan_id")
  loan   Loan? @relation(fields: [loanId], references: [id])

  @@map("loan_repayments")
}

// This model stores a detailed schedule of individual payments for each loan, including principal, interest, and any applicable fees, over the loan term.
model LoanSchedule {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Unique identifier for each installment within the schedule
  installmentNumber Int @map("installment_number")

  // Date the installment is due	
  dueDate DateTime @map("due_date")

  // Scheduled amount of principal repayment in this installment
  principalAmount Decimal @map("principal_amount") @db.Decimal(10, 2)

  // Scheduled amount of interest payment in this installment
  interestAmount Decimal @map("interest_amount") @db.Decimal(10, 2)

  // Scheduled amount of late fee in this installment
  lateFeeAmount Decimal @map("late_fee_amount") @db.Decimal(10, 2)

  // Total amount due for this installment
  totalPayment Decimal @map("total_payment") @db.Decimal(10, 2)

  // Status of the installment (e.g., pending, paid, overdue)
  paymentStatus String @map("payment_status")

  // Date the installment was paid
  paidDate DateTime @map("paid_date")

  // Relationships
  loanId Int   @map("loan_id")
  loan   Loan? @relation(fields: [loanId], references: [id])

  @@map("loan_schedules")
}

// This model stores information about collateral assets pledged by users to secure their loans.
model LoanCollateral {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Type of collateral asset (e.g., property, vehicle, stock)	
  type String

  // Description of the collateral asset
  description String? @db.Text

  // Estimated market value of the collateral asset
  estimatedValue Decimal @map("estimated_value") @db.Decimal(10, 2)

  // Relationships

  loanId Int   @map("loan_id")
  loan   Loan? @relation(fields: [loanId], references: [id])

  @@map("loan_collaterals")
}

// This model stores information and links to various documents related to individual loans and loan collaterals.
model LoanDocument {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Type of document (e.g., loan agreement, promissory note, collateral documents: ownership, valuation report)
  type String

  value       String
  documentUrl String
  description String? @db.Text

  // Relationships
  loanId Int   @map("loan_id")
  loan   Loan? @relation(fields: [loanId], references: [id])

  @@map("loan_documents")
}

// This model stores a chronological record of user activities and system events related to various aspects of the platform.
model AuditTrail {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Description of the performed action (e.g., login attempt, loan application, document upload)
  action String

  // Resource or entity affected by the action (e.g., loan, document, user profile)
  resource String

  // Id to specific model depending on the "resource" field 
  resource_id Int @map("resource_id")

  // IP address of the user who performed the action
  ipAddress String @map("ip_address")

  // User agent string identifying the device and browser
  userAgent String @map("user_agent")

  // Optional JSON object containing additional details about the action
  details Json?

  // relationship

  userId Int   @map("user_id")
  user   User? @relation(fields: [userId], references: [id])

  @@map("audit_trails")
}
