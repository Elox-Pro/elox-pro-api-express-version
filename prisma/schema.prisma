generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  role String

  // Define one-to-one relationship with credentials
  credential Credential?

  // Define one-to-one relationship with profiles
  profile Profile?

  // Define one-to-one relationship with company owner (companies)
  companyOwner Company? @relation(name: "company_owner")

  // Define one-to-one relationship with customers
  customer Customer?

  //Define in another model
  // Define one-to-many relationship with staffs (users)
  companyStaffId Int?     @map("company_staff_id")
  companyStaff   Company? @relation(name: "company_staffs", fields: [companyStaffId], references: [id])

  // Define one-to-many relationship with user documents
  documents UserDocument[] @relation(name: "user_documents")

  @@map("users")
}

model Customer {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  rankPoints Int?

  // Define one-to-one relationship with users
  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  // Define one-to-many relationship with customers
  companyId Int     @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  // Define one-to-many relationship with contacts
  contacts Contact[] @relation(name: "customer_contacts")

  //TODO:To define one-to-one relationship with rank
  rankId Int?
}

model Company {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  name     String  @unique()
  imageUrl String? @map("image_url")

  // Define one-to-one relationship with owner (users) 
  ownerId Int?  @unique @map("owner_id")
  owner   User? @relation(name: "company_owner", fields: [ownerId], references: [id])

  // Define one-to-many relationship with customers
  customers Customer[]

  // Define one-to-many relationship with staffs (users)
  staffs User[] @relation(name: "company_staffs")

  @@map("companies")
}

model Credential {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  email         String    @unique
  phone         String    @unique
  username      String    @unique
  password      String
  emailVerified Boolean   @default(false) @map("email_verified")
  phoneVerified Boolean   @default(false) @map("phone_verified")
  authMethod    String?   @map("auth_method")
  lastLoginAt   DateTime? @map("last_login_at")

  // Define one-to-one relationship with users
  userId Int?  @unique @map("user_id")
  user   User? @relation(fields: [userId], references: [id])

  @@map("credentials")
}

model Profile {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  firstName String
  lastName  String
  gender    String?
  avatarUrl String? @map("avatar_url")

  // Define one-to-one relationship with users
  userId Int?  @unique @map("user_id")
  user   User? @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model UserDocument {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  type             String
  value            String?
  description      String?
  documentFrontUrl String? @map("document_front_url")
  documentBackUrl  String? @map("document_back_url")

  // Define one-to-many relationship with users
  userId Int  @unique @map("user_id")
  user   User @relation(name: "user_documents", fields: [userId], references: [id])

  @@map("users_documents")
}

model Contact {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  type         String // reference, sponsor, guarantor
  relationship String?

  // Define one-to-many relationship with customers
  customerId Int      @unique @map("customer_id")
  customer   Customer @relation(name: "customer_contacts", fields: [customerId], references: [id])
}
