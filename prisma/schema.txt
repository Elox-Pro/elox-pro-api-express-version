generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  password    String
  authEnabled Boolean   @default(false) @map("auth_enabled")
  role        String
  authMethod  String?   @map("auth_method")
  lastLoginAt DateTime? @map("last_login_at")
  updatedAt   DateTime  @default() @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // One-to-one relationship with profiles 
  profile Profile? @relation(fields: [id], references: [userId], onDelete: Cascade)

  // One-to-one relationship with avatars
  avatar Avatar? @relation(fields: [id], references: [userId])

  // One-to-one relationship with user details
  userDetails UserDetails? @relation(fields: [id], references: [userId], onDelete: Cascade)

  // One-to-many relationship with customers
  customers Customer[] @relation(name: "user_to_customers", fields: [id], references: [ownerId])

  // One-to-many relationship with customers
  employees Employee[] @relation(name: "user_to_employees", fields: [id], references: [ownerId])

  // One-to-many relationship with user details
  // referralDetails UserDetails? @relation(fields: [

  // One-to-many relationship with document details
  documentDetails DocumentDetails[] @map("document_details")

  // One-to-many relationship with accounts
  accounts Account[]

  // One-to-many relationship with addresses
  addressId Int?      @map("address_id") @relation(fields: [addressId], references: [id])
  addresses Address[]

  // one-to-many relationship with loan settings
  loanSettings LoanSettings[]

  // one-to-many relationship with loans
  customerLoans  Loan[] @relation("Customer")
  guarantorLoans Loan[] @relation("Guarantor")

  @@map("users")
}

model Profile {
  id            Int      @id @default(autoincrement())
  name          String
  lastName      String   @map("last_name")
  phone         String   @unique
  email         String   @unique
  gender        String?
  emailVerified Boolean  @default(false) @map("email_verified")
  phoneVerified Boolean  @default(false) @map("phone_verified")
  updatedAt     DateTime @default() @updatedAt @map("updated_at")
  createdAt     DateTime @default(now()) @map("created_at")

  // One-to-one relationship with user
  userId Int @unique @map("user_id") @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Customer {
  id        Int      @id @default(autoincrement())
  ownerId   Int      @map("owner_id") @relation(name: "users_to_customers", fields: [ownerId], references: [id])
  updatedAt DateTime @default() @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("customers")
}

model Employee {
  id        Int      @id @default(autoincrement())
  ownerId   Int      @map("owner_id") @relation(name: "users_to_employees", fields: [ownerId], references: [id])
  updatedAt DateTime @default() @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("employees")
}

model DocumentDetails {
  id               Int      @id @default(autoincrement())
  type             String
  number           String
  description      String?
  documentFrontUrl String?  @map("document_front_url")
  documentBackUrl  String?  @map("document_back_url")
  // Many-to-One relationship with User
  userId           Int      @map("user_id") @relation(fields: [userId], references: [id], onDelete: Cascade)
  user             User?
  updatedAt        DateTime @default(now()) @map("updated_at")
  createdAt        DateTime @default(now()) @map("created_at")

  @@map("document_details")
}

model UserDetails {
  id   Int     @id @default(autoincrement())
  type String?
  // Foreign Keys

  contactId    Int?     @map("contact_id") @relation(fields: [contactId], references: [id])
  rankId       Int?     @map("rank_id") @relation(fields: [rankId], references: [id])
  // Additional fields
  relationship String?
  rankPoints   Int      @map("rank_points")
  updatedAt    DateTime @default(now()) @map("updated_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // One-to-one relationship with users
  userId Int @unique @map("user_id") @relation(name: "user_id", fields: [userId], references: [id])

  // Many-to-one relationship with users
  referredById Int? @map("referred_by_id") @relation(name: "referred_by_id", fields: [referredById], references: [id])

  // referredBy User? @map("referred_by") @relation(fields: [referredById], references: [id])
  // reference  User? @relation(fields: [contactId], references: [id])
  rank Rank? @relation(fields: [rankId], references: [id])

  @@map("user_details")
}

model KYC {
  id               Int       @id @default(autoincrement())
  // Foreign Keys
  userId           Int       @map("user_id") @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Flags
  verified         Boolean   @default(false)
  rejected         Boolean   @default(false)
  // Rejection details
  rejectionReason  String?   @map("rejection_reason")
  verificationDate DateTime? @map("verification_date")
  updatedAt        DateTime  @default(now()) @map("updated_at")
  createdAt        DateTime  @default(now()) @map("created_at")

  // One-to-one relationship with User
  user User? @relation(fields: [userId], references: [id])

  @@maps("KYCs")
}

model Address {
  id               Int       @id @default(autoincrement())
  streetAddress    String    @map("street_address")
  apartamentNumber String?   @map("apartament_number")
  city             String
  state            String
  countryId        Int       @map("country_id") @relation(fields: [countryId], references: [id], onDelete: Cascade)
  zipCode          String    @map("zip_code")
  type             String
  isDefault        Boolean   @default(false) @map("is_default")
  updatedAt        DateTime? @default(now()) @map("update_at")
  createdAt        DateTime? @default(now()) @map("created_at")

  // One-to-many relationship with User
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  // One-to-one relationship with country
  country Country? @relation(fields: [countryId], references: [id])

  @@map("addresses")
}

model Account {
  id            Int       @id @default(autoincrement())
  // Foreign Keys
  userId        Int       @map("user_id") @relation(fields: [userId], references: [id], onDelete: Cascade)
  ownerId       Int?      @map("owner_id") @relation(fields: [ownerId], references: [id])
  // Account details
  accountNumber String    @unique @map("account_number")
  accountType   String    @map("account_type")
  isActive      Boolean   @default(true) @map("is_active")
  isPrimary     Boolean   @default(false) @map("is_primary")
  bankName      String    @map("bank_name")
  iban          String?   @unique
  bic           String?   @unique
  // Account metadata
  updatedAt     DateTime? @default(now()) @map("update_at")
  createdAt     DateTime? @default(now()) @map("created_at")

  // One-to-many relationship with User
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  owner User? @relation(fields: [ownerId], references: [id])

  @@maps("accounts")
}

model LoanSettings {
  id                Int      @id @default(autoincrement())
  loanType          String   @unique @map("loan_type")
  ownerId           Int      @map("owner_id")
  lateFeePercentage Decimal  @map("late_fee_percentage")
  gracePeriodDays   Int      @map("grace_period_days")
  defaultDatePeriod Int      @map("default_date_period")
  updatedAt         DateTime @updatedAt @map("updated_at")
  createdAt         DateTime @map("created_at") @createdAt

  //  One-to-many relationship with owner
  owner User? @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@map("loan_settings")
}

model Loan {
  id                  Int       @id @default(autoincrement())
  applicationDate     DateTime  @map("application_date")
  approvalDate        DateTime  @map("approval_date")
  amount              Float
  interestRate        Float     @map("interest_rate")
  monthlyInterestRate Float     @map("monthly_interest_rate")
  term                Int
  repaymentFrequency  String    @map("repayment_frequency")
  status              String
  enabledLateFee      Boolean   @default(false) @map("enabled_late_fee")
  closedDate          DateTime? @map("closed_date")
  pastDueStage        String?   @map("past_due_stage")
  collectionStatus    String?   @map("collection_status")
  defaultDate         DateTime? @map("default_date")
  notes               String?
  updatedAt           DateTime  @updatedAt @map("updated_at")
  createdAt           DateTime  @map("created_at") @createdAt

  //  One-to-many relationship with user
  customerId Int  @map("customer_id")
  customer   User @relation("Customer", fields: [customerId], references: [id])

  //  One-to-many relationship with user
  guarantorId Int?  @map("guarantor_id")
  guarantor   User? @relation("Guarantor", fields: [guarantorId], references: [id])

  // Many-to-one relationship with loan settings
  loanSettingsId Int          @map("loan_settings_id")
  loanSettings   LoanSettings @relation(fields: [loanSettingsId], references: [id])

  // one-to-many relationship with repayments
  repayments    Repayment[]
  // one-to-many relationship with loan schedules
  loanSchedules LoanSchedule[]
  // one-to-many relationship with collaterals
  collaterals   Collateral[]
  // one-to-many relationship with loan documents
  loanDocuments LoanDocument[]
}
